import math
from forTest import *
import numpy as np

def sigmoid(x):
    ans = 1 / (1 + math.exp(-x))
    # print(ans)
    return ans


def calculateV(iterasyonBilgisi, i, bi):
    x = 0
    for j in range(0, 23):
        x = x + Pgiris[j][iterasyonBilgisi] * wBar[j][i]
    x = x + bi
    return x


if __name__ == '__main__':

    nu = 0.6  # momentum katsayisi 0.6-0.8
    alfa = 0.5  # ogrenme katsayisi 0 - 1
    # 100000 epoch
    w = [[-2.4680725519329116, -2.4089802739249073, -2.706927490418844, 2.628375973804632, 14.889679565819534],
         [-2.071552266035892, -1.6268110494043222, -1.747754605716654, 15.238401642890615, 9.672404284838311]]
    bias = [-2.803351640087157, -2.801121001221587]
    wBar = [[2.312142876908226, 0.8729080417059515, 0.9806695095854605, 0.9851827071271766, -0.7729551758593279],
            [0.9769769763711156, 0.44785442458104807, 0.6436593277029197, -0.5828314922466606, 0.557083742152409],
            [-0.4221683883523766, 0.41018301932775086, 0.1559205181135065, 0.5991264099020318, 1.4112704817985278],
            [1.4465692588459993, 0.8625386891662901, 0.3189263515790471, 1.6275665862830084, 2.699819167883631],
            [0.05596596321501429, 0.3753305826024479, 0.6869856416453477, 0.4567413121736023, -0.653025706194244],
            [1.2455710057137348, 0.4324185151638042, 0.6054251882416443, -0.3716889503295188, -2.431264648736928],
            [0.5067998797010956, 0.914887353818042, 0.5820145169426469, 1.0522886758792143, -0.4894833616089552],
            [-0.2324611282049509, 0.18368237273560656, 0.40772888688516634, -0.025214329871875444, 1.4204776651992157],
            [1.1462085412055332, 0.5570171629539262, 0.40192773293472134, -1.3384593044143698, 0.7465573464264279],
            [-0.048095595854739735, 0.15591975926575508, 0.987436904290264, 3.4469329562489635, 2.2585396989709547],
            [0.6248574051552869, 0.8764382146753273, 0.11293983175678239, -1.6047606609802862, -1.6583402685826625],
            [0.6914595760026171, 0.6492563684204556, 0.8975651082501122, 3.505632634803598, 4.102113554617919],
            [0.5222044992794279, 0.5787164224345404, 0.08718574577446869, -1.956863615521957, -0.19565272772869735],
            [1.2289996916397188, 0.9105963909441355, 0.09734048056610102, 1.6457052670293122, 3.4038543656720077],
            [0.6234463217167144, 0.7129634019932793, 0.6131501601961651, 3.800726200751164, 3.9105878420359756],
            [1.0941975511643915, 0.725640810396743, 0.7211193458671672, -2.3515637531915097, -1.7272591157790425],
            [0.7924693115427859, 0.011802877592346548, 0.14832410663709658, 1.8416910787447789, 2.330204447834857],
            [0.5344530575859563, 0.32726403315983504, 0.3208459760046477, 2.436344553815916, -1.1767237674042488],
            [0.8194298453310762, 0.6818672512024555, 0.8220087346614915, 2.8279526513223567, 4.483647098219412],
            [0.5419333752971126, 0.4847397205331095, 0.856931189655895, 4.784738138338543, 1.5583424407433133],
            [0.8275022074018341, 0.2719305316672254, 0.7337181878034525, -0.11921136511592839, -1.0524844817013246],
            [1.0521291839886044, 0.588109423308513, 0.633394417012085, 1.3509089721512053, 1.9069723447640512],
            [0.7276904395366458, 0.5504697319553795, 0.7089193181381642, 3.1176030396231846, -0.14400681087100253]]
    biasBar = [0.7043621902296872, 0.55639543609776, 0.8478351143081246, -9.968072509112242, -12.052720475081108]
    itterasyon = 300
    opbar = []
    sayac2 = 0
    iterasyonBilgisi = 0
    for i in range(0, itterasyon):
        V = []
        for j in range(0, 5):
            V.append(calculateV(iterasyonBilgisi, j, biasBar[j]))
        op1bar = sigmoid(V[0])
        op2bar = sigmoid(V[1])
        op3bar = sigmoid(V[2])
        op4bar = sigmoid(V[3])
        op5bar = sigmoid(V[4])
        op1 = sigmoid(op1bar * w[0][0] + op2bar * w[0][1] + op3bar * w[0][2] + op4bar * w[0][3] + op5bar * w[0][4] +
                      bias[0])
        op2 = sigmoid(op1bar * w[1][0] + op2bar * w[1][1] + op3bar * w[1][2] + op4bar * w[1][3] + op5bar * w[1][4] +
                      bias[1])

        if round(op1, 3) > 0.990:
            op1 = 1
        if round(op2, 3) > 0.990:
            op2 = 1
        if round(op1, 3) < 0.009:
            op1 = 0
        if round(op2, 3) < 0.009:
            op2 = 0

        if op1 == Levels[i][0] and op2 == Levels[i][1]:
            sayac2 = sayac2 + 1
        iterasyonBilgisi += 1

        print(sayac2/3)
