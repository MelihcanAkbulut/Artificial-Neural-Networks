import math
from forTest import *
import numpy as np


def sigmoid(x):
    ans = 1 / (1 + math.exp(-x))
    # print(ans)
    return ans


def calculateV(iterasyonBilgisi, i, bi):
    x = 0
    for j in range(0, 23):
        x = x + Pgiris[j][iterasyonBilgisi] * wBar[j][i]
    x = x + bi
    return x


if __name__ == '__main__':

    nu = 0.6  # momentum katsayisi 0.6-0.8
    alfa = 0.5  # ogrenme katsayisi 0 - 1
    w = [[-2.6411915002551534, -2.692458897530675, -2.643632420106203, -2.705576114610023, -2.3254074580414748, -2.9859080206070563, -2.84862286121579, -2.76865145482393, 33.45681402722281, -2.610669633076347], [-1.0823380217364997, -0.7166458492746813, -0.5832907497037457, 0.39609917253240035, -0.28919669647423923, -0.37848591067826604, -0.6479395798892302, -0.9472504667618361, 34.29014825453857, -0.6555334002804104]]
    bias = [-2.2847017969845558, -1.484636785507514]
    wBar = [[0.5354306288541381, 0.9642395502769574, 1.0271512531216307, 0.6748295524158598, 0.5635317661294664, 0.43229071947320896, 0.8761420664384945, 1.0267981887802728, 0.007528020283695222, 2.849229115045779], [0.3029598969159733, 0.5561001941440707, 0.719610465825212, 0.24433567311077703, 0.409346891863255, 0.8434712478263953, 0.6683760709274402, 0.7684071650714394, -0.020878194941275456, 3.0605110139498244], [1.2835106740593398, 0.5166522106743533, 0.2111344533302787, 0.9447299965701875, 0.6395984882543613, 0.43478340360747175, 0.8691966793229421, 1.0222044051028878, -0.06394699043275419, -1.47017049715431], [0.9448549453693834, 0.8940301197837857, 0.3416162937414023, 0.06381836318274732, 0.6659800572656216, 0.822819035815252, 0.6356200081746439, 0.7559031029049423, 2.6088727273720766, 1.4243729579808986], [0.5637009122791199, 0.5311243626665683, 0.7466531789382354, 0.6543376509823831, 0.8480906951446784, 0.8955477493892303, 0.8074157153383889, 0.7652979876824422, -0.4217012178893889, -0.1103331633589314], [0.805577651400122, 0.5137154910228581, 0.6493244204745465, 0.7994034552167143, 0.22355858481731253, 0.8831417517462973, 0.8080252106572468, 0.7716657230180295, -6.834094174006221, 2.7396465728353605], [0.27806856619653497, 0.920251544865628, 0.6415157739811767, 0.2656416203594223, 0.6014035272951483, 0.8285978995541744, 0.6279526120053059, 0.7455491227769323, 4.912808451876139, 2.6488782036518628], [0.561699645460311, 0.23278214531926142, 0.46808087147675814, 0.12211986501477161, 0.7532217724227189, 0.28616659329013433, 0.2260936917482901, 0.45162287866365414, 4.561339545899506, 0.542213523075273], [0.9342473761764906, 0.5982598382537933, 0.4524783616124771, 0.32618426073940143, 0.7083295368841227, 0.8700529261744799, 0.8018411014075059, 0.7734537292438622, -2.001660612442774, 2.058961494131851], [-0.02465409765895136, 0.30964923283332985, 1.0357135806703472, 0.4026396376243643, 0.9213767355647271, 0.4138593021519326, 0.8578577642997529, 1.0119046053051952, 3.5356000767843665, 1.0440487411006394], [0.21662418164810263, 0.9560928337806948, 0.13697102669068156, 0.6648956794475817, 0.23028433870191042, 0.4321897321423679, 0.8711368489178345, 1.0097793297028028, -3.951198165671167, 1.700807257483891], [0.5353837923862489, 0.729750342047417, 0.9457049956360917, 0.12444094309703846, 0.776298055715491, 0.8509706673571941, 0.6523513413907757, 0.7474965701688303, 4.4292336096305105, 1.992482753883435], [1.1283979860098237, 0.6785324661636849, 0.12136774212344423, 0.7753570504945604, 0.5791958010452429, 0.4307279083554455, 0.8631289133189745, 1.0060520855124027, -1.317118599540518, -0.46091711282920245], [1.2232222276765512, 0.9666521645137262, 0.11864487704099395, 0.6910904621435411, 0.8088517156982133, 0.3114632241448131, 0.23105160330801533, 0.44180535363089496, 4.723789089710775, 0.979994085834305], [0.7557482051048379, 0.8129639735990958, 0.6497501741815274, 0.6424801170302747, 0.7392081646425406, 0.8306005539442392, 0.6339906730769496, 0.7449100297574648, 4.463126454152456, 0.8760377014680257], [1.1229888889806112, 0.805588720315433, 0.7554228081782653, 0.1141917293032128, 0.057920573685284533, 0.3211518237811791, 0.233984010110583, 0.4441145350721383, -3.925159355256634, 2.104031491824426], [0.7744348525364906, 0.044628487187728154, 0.19375255619762108, 0.7267021765210544, 0.3261190904380447, 0.33707247203495333, 0.22792906058186507, 0.43171988158422464, 1.110045460950144, 1.595151721943727], [0.8199912298442892, 0.4152198483029985, 0.3804949683742906, 0.9802306722215959, 0.8445860496691655, 0.48183291839861425, 0.8944756901833133, 1.0085261445691354, 0.4892712285042671, 0.45615041431127895], [0.8467468417632573, 0.7559619474696099, 0.8704114778490701, 0.25934447754431195, 0.6991443866670657, 0.347194004290117, 0.2507445022037802, 0.4490793725590812, 5.619352808614615, 1.766473796387299], [0.4915022529489235, 0.5801947045146435, 0.8876778466720995, 0.6627393921177024, 0.23853470367138954, 0.872417971461485, 0.7709325472154347, 0.7361874067451625, 3.4831124319038302, 0.23840444014718523], [0.7660566950059906, 0.3569700361026374, 0.7580500361373728, 0.33389043459385714, 0.9759862429524502, 0.4327437383425048, 0.8641081553131353, 1.000374016280957, 0.3050857544881515, 1.1252203052212106], [1.0455420597918879, 0.6891294674344992, 0.6890923741280657, 0.7543102328356359, 0.062009841767552386, 0.3584354863400046, 0.26171871027667826, 0.4407175503738178, 4.262984926766944, 1.2498751970251385], [0.9883606886594402, 0.6480095748407515, 0.7406880612476373, 0.2024184823730262, 0.9574425732614223, 0.8864653480156087, 0.7813578296894163, 0.7367641590617879, 1.0248700582797474, -0.5180158565505444]]
    biasBar = [0.7736152249737454, 0.7381606214466819, 0.9180200034430002, 0.4533448419753278, 0.7404119125041828, 0.7816876293609868, 0.7651292731853039, 0.8819816665359579, -13.748361420123663, 0.6343428852723421]
    araKatman = 2
    epoch = 1
    itterasyon = 300
    opbar = []
    sayac2 = 0
    iterasyonBilgisi = 0
    for i in range(0, itterasyon):
        V = []
        for j in range(0, 10):
            V.append(calculateV(iterasyonBilgisi, j, biasBar[j]))
        op1bar = sigmoid(V[0])
        op2bar = sigmoid(V[1])
        op3bar = sigmoid(V[2])
        op4bar = sigmoid(V[3])
        op5bar = sigmoid(V[4])
        op6bar = sigmoid(V[5])
        op7bar = sigmoid(V[6])
        op8bar = sigmoid(V[7])
        op9bar = sigmoid(V[8])
        op0bar = sigmoid(V[9])

        op1 = sigmoid(
            op1bar * w[0][0] + op2bar * w[0][1] + op3bar * w[0][2] + op4bar * w[0][3] + op5bar * w[0][4] + op6bar *
            w[0][5] + op7bar * w[0][6] + op8bar * w[0][7] + op9bar * w[0][8] + op0bar * w[0][9] + bias[0])
        op2 = sigmoid(
            op1bar * w[1][0] + op2bar * w[1][1] + op3bar * w[1][2] + op4bar * w[1][3] + op5bar * w[1][4] + op6bar *
            w[1][5] + op7bar * w[1][6] + op8bar * w[1][7] + op9bar * w[1][8] + op0bar * w[1][9] + bias[1])
        if round(op1, 3) > 0.990:
            op1 = 1
        if round(op2, 3) > 0.990:
            op2 = 1
        if round(op1, 3) < 0.009:
            op1 = 0
        if round(op2, 3) < 0.009:
            op2 = 0
        print(op1)
        print(op2)
        if op1 == Levels[i][0] and op2 == Levels[i][1]:
            sayac2 = sayac2 + 1
        iterasyonBilgisi += 1

        print(sayac2/3)
